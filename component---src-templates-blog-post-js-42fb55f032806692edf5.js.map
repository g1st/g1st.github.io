{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./src/templates/blogPost.js"],"names":["MDXRenderer","require","module","React","useMDXComponents","mdx","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn","Container","styled","div","Article","article","theme","colors","tertiary","Heading","h1","Date","span","Header","header","media","xs","NavigationList","ul","Blog","data","pageContext","location","frontmatter","excerpt","body","previous","next","cover","coverPath","childImageSharp","fixed","src","title","description","image","slug","type","date","to","fields","rel","aria-label","pageQuery"],"mappings":"gFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,qrECTf,IAAMG,EAAQF,EAAd,Q,EACkCA,EAAQ,QAAlCG,E,EAAAA,iBAAkBC,E,EAAAA,IAClBC,EAAgBL,EAAQ,QAAxBK,YAERJ,UAAiB,SAAqB,GAKlC,IAJFK,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBP,EAAtB,GACMQ,EAAWN,EAFhB,GAKKO,EAAMV,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMW,EAAS,GAGbX,MAHa,EAIbE,OAJF,GAQMU,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAON,EAAA,mBAA2BK,WAAYG,GAA9C,M,2TC1BF,IAAMS,EAAYC,IAAOC,IAAV,0EAAGD,CAAH,sDAMTE,EAAUF,IAAOG,QAAV,wEAAGH,CAAH,yEACgB,qBAAGI,MAAkBC,OAAOC,YAKnDC,EAAUP,IAAOQ,GAAV,wEAAGR,CAAH,qCAKPS,EAAOT,IAAOU,KAAV,qEAAGV,CAAH,MAEJW,EAASX,IAAOY,OAAV,uEAAGZ,CAAH,2BAGRa,IAAMC,GAHE,MAQNC,EAAiBf,IAAOgB,GAAV,+EAAGhB,CAAH,0FA6DLiB,UArDF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAA4B,KAAfC,SACMF,EAAKlC,KAApCqC,EADwC,EACxCA,YAAaC,EAD2B,EAC3BA,QAASC,EADkB,EAClBA,KACtBC,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KACVC,EAAUL,EAAVK,MACFC,EAAYD,GAASA,EAAME,gBAAgBC,MAAMC,IAEvD,OACE,kBAAC/B,EAAD,KACE,kBAAC,IAAD,CACEgC,MAAOV,EAAYU,MACnBC,YAAaX,EAAYW,aAAeV,EACxCW,MAAON,EACPO,KAAMf,EAAYe,KAClBC,KAAK,YAEP,kBAACjC,EAAD,KACE,kBAACS,EAAD,KACE,kBAACJ,EAAD,KAAUc,EAAYU,OACtB,kBAACtB,EAAD,KAAOY,EAAYe,OAErB,kBAAC,cAAD,KAAcb,IAGhB,6BACE,kBAACR,EAAD,KACE,4BACGS,GACC,kBAAC,OAAD,CACEa,GAAIb,EAASc,OAAOJ,KACpBK,IAAI,OACJC,aAAA,QAAoBhB,EAASH,YAAYU,MAAzC,SAHF,KAKKP,EAASH,YAAYU,QAI9B,4BACGN,GACC,kBAAC,OAAD,CACEY,GAAIZ,EAAKa,OAAOJ,KAChBK,IAAI,OACJC,aAAA,QAAoBf,EAAKJ,YAAYU,MAArC,SAECN,EAAKJ,YAAYU,MALpB,WAiBP,IAAMU,EAAS","file":"component---src-templates-blog-post-js-42fb55f032806692edf5.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\nimport { Link, graphql } from \"gatsby\";\n\nimport { media } from \"../styles/mixins\";\nimport SEO from \"../components/seo\";\n\nconst Container = styled.div`\n  margin: 3rem auto;\n  max-width: 42rem;\n  padding: 0 2rem;\n`;\n\nconst Article = styled.article`\n  border-bottom: 3px solid ${({ theme }) => theme.colors.tertiary};\n  margin-bottom: 2rem;\n  padding-bottom: 2rem;\n`;\n\nconst Heading = styled.h1`\n  margin-bottom: 0;\n  font-size: 3rem;\n`;\n\nconst Date = styled.span``;\n\nconst Header = styled.header`\n  margin-bottom: 2rem;\n\n  ${media.xs`\n    margin-bottom: 3rem;\n  `}\n`;\n\nconst NavigationList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style: none;\n  padding: 0;\n`;\n\nconst Blog = ({ data, pageContext, location }) => {\n  const { frontmatter, excerpt, body } = data.mdx;\n  const { previous, next } = pageContext;\n  const { cover } = frontmatter;\n  const coverPath = cover && cover.childImageSharp.fixed.src;\n\n  return (\n    <Container>\n      <SEO\n        title={frontmatter.title}\n        description={frontmatter.description || excerpt}\n        image={coverPath}\n        slug={pageContext.slug}\n        type=\"article\"\n      />\n      <Article>\n        <Header>\n          <Heading>{frontmatter.title}</Heading>\n          <Date>{frontmatter.date}</Date>\n        </Header>\n        <MDXRenderer>{body}</MDXRenderer>\n      </Article>\n\n      <nav>\n        <NavigationList>\n          <li>\n            {previous && (\n              <Link\n                to={previous.fields.slug}\n                rel=\"prev\"\n                aria-label={`View ${previous.frontmatter.title} page`}\n              >\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link\n                to={next.fields.slug}\n                rel=\"next\"\n                aria-label={`View ${next.frontmatter.title} page`}\n              >\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </NavigationList>\n      </nav>\n    </Container>\n  );\n};\n\nexport default Blog;\n\nexport const pageQuery = graphql`\n  query PostBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      body\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        title\n        cover {\n          childImageSharp {\n            fixed(traceSVG: { color: \"#639\" }) {\n              tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}